import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        ArrayList<String> res = getStairPaths(n);
        System.out.println(res);
    }

    public static ArrayList<String> getStairPaths(int n) {
        
        ArrayList<String> myres = new ArrayList<>();
        // ArrayList<String> rres = null;
        
        // Method 2 
        // smart base case
        // stupid calls
        //   if(n<=0){
        //       ArrayList<String> base = new ArrayList<>();
        //       if(n == 0){
        //           base.add("");
        //       }
        //       return base;
        //   }
        
        
        // rres = getStairPaths(n-1);
        // // jump 1
        // for(String s:rres){
        //     myres.add("1"+s);
        // }
        // rres = getStairPaths(n-2);
        // // jump 2
        // for(String s:rres){
        //     myres.add("2"+s);
        // }
        // rres = getStairPaths(n-3);
        // // jump 3
        // for(String s:rres){
        //     myres.add("3"+s);
        // }
        
        
        // Method 1 (most preffered)
        //stupid base case
        // smart calls
        // if(n==0){
        //     ArrayList<String> base = new ArrayList<>();
        //     base.add("");
        //     return base;
        // }
        
        // if(n-1 >= 0){
        //     // jump 1
        //     ArrayList<String> rres = getStairPaths(n-1);
        //     for(String s:rres){
        //         myres.add("1"+s);
        //     }
        // }
        // if(n-2 >= 0){
        //     // jump 2
        //     ArrayList<String> rres = getStairPaths(n-2);
        //     for(String s:rres){
        //         myres.add("2"+s);
        //     }
        // }
        // if(n-3 >= 0){
        //     // jump 3
        //     ArrayList<String> rres = getStairPaths(n-3);
        //     for(String s:rres){
        //         myres.add("3"+s);
        //     }
        // }
        
        // Method 3
        // baseCase
        if(n == 0){
            ArrayList<String> base = new ArrayList<>();
            base.add("");
            return base;
        }
        
        // calling
        for(int jump=1;jump<=3 && n-jump>=0;jump++){
            ArrayList<String> rres = getStairPaths(n-jump);
            for(String s:rres){
                myres.add(jump+s);
            }
        }
        
        return myres;
        
    }

}