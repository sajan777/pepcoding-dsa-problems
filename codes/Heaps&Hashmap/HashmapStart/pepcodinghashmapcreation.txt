import java.io.*;
import java.util.*;

public class Main {

  public static class HashMap<K, V> {
    private class HMNode {
      K key;
      V value;

      HMNode(K key, V value) {
        this.key = key;
        this.value = value;
      }
    }

    private int size; // n
    private LinkedList<HMNode>[] bucket; // N = bucket.length

    public HashMap() {
      initbuckets(4);
      size = 0;
    }

    private void initbuckets(int N) {
      bucket = new LinkedList[N];
      for (int bi = 0; bi < bucket.length; bi++) {
        bucket[bi] = new LinkedList<>();
      }
      size = 0;
    }
    
    private int hashFunction(K key){
        // in java every data type has hashcode function hashcode->Always integer
        int bi = Math.abs(key.hashCode()) % bucket.length;
        // 0<=bi<bucket.length;
        return bi;
    }
    private int searchInBucket(K key,int bi){
        int di = 0;

        for(HMNode node:bucket[bi]){
            if(node.key.equals(key) == true){
                return di;
            }
            di++;
        }
        return -1 ;
    }
    private void rehash(){
        LinkedList<HMNode>[] ob = bucket;
        initbuckets(2 * bucket.length);

        // travel on old bucket and fill the new bucket
        for(int i=0;i<ob.length;i++){
            for(HMNode node:ob[i]){
                put(node.key, node.value);
            }
        }
    }

    public void put(K key,V value) {
        
        int bi = hashFunction(key);

        int di = searchInBucket(key,bi);

        if(di == -1){
            // not present -> insert
            bucket[bi].addLast(new HMNode(key,value));
            this.size++;
        }else{
            // present -> update
            bucket[bi].get(di).value = value;
        }
        int n = this.size;
        int N = bucket.length;
        double lambda = n*1.0/N;
        if(lambda > 2){
            rehash();
        }
        
    }

    public V remove(K key) {
        int bi = hashFunction(key);
        int di = searchInBucket(key, bi);
        if(di == -1){
            return null;
        }else{
            // remove node in linkedlist
            HMNode rem = bucket[bi].remove(di);
            // return value;
            this.size--;
            return rem.value;
        }
    }

    public V get(K key) {
        int bi = hashFunction(key);
        int di = searchInBucket(key, bi);
        if(di == -1){
            return null;
        }else{
            // remove node in linkedlist
            HMNode g = bucket[bi].get(di);
            // return value;
            return g.value;
        }
    }

    public boolean containsKey(K key) {
        int bi = hashFunction(key);
        int di = searchInBucket(key, bi);
        if(di == -1){
            return false;
        }else{
            return true;
        }
    }

    public ArrayList<K> keyset() {
        ArrayList<K> list = new ArrayList<>();
        for(int bi=0;bi<bucket.length;bi++){
            for(HMNode node:bucket[bi]){
                list.add(node.key);
            }
        }
        return list;
    }

    public int size() {
        return this.size;
    }

   public void display() {
      System.out.println("Display Begins");
      for (int bi = 0; bi < bucket.length; bi++) {
        System.out.print("Bucket" + bi + " ");
        for (HMNode node : bucket[bi]) {
          System.out.print( node.key + "@" + node.value + " ");
        }
        System.out.println(".");
      }
      System.out.println("Display Ends");
  }
}

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    HashMap<String, Integer> map = new HashMap();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("put")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        Integer val = Integer.parseInt(parts[2]);
        map.put(key, val);
      } else if (str.startsWith("get")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.get(key));
      } else if (str.startsWith("containsKey")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.containsKey(key));
      } else if (str.startsWith("remove")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.remove(key));
      } else if (str.startsWith("size")) {
        System.out.println(map.size());
      } else if (str.startsWith("keyset")) {
        System.out.println(map.keyset());
      } else if (str.startsWith("display")) {
        map.display();
      }
      str = br.readLine();
    }
  }
}